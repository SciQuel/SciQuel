// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StoryType {
  ARTICLE
}

enum ContributionType {
  AUTHOR
  ILLUSTRATOR
  ANIMATOR
}

enum StoryTopic {
  ASTRONOMY
  BIOLOGY
  CHEMICAL_ENGINEERING
  CHEMISTRY
  COMPUTER_SCIENCE
  ELECTRICAL_ENGINEERING
  ENVIRONMENTAL_SCIENCE
  GEOLOGY
  MATHEMATICS
  MECHANICAL_ENGINEERING
  MEDICINE
  PHYSICS
  PSYCHOLOGY
  SOCIOLOGY
  TECHNOLOGY
}

enum AuthVerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

model Story {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storyType StoryType

  title      String
  titleColor String

  slug String // Title slug for URL conforming to RFC 3986

  summary      String
  summaryColor String

  tags StoryTopic[]

  storyContributions StoryContribution[]
  storyContent       StoryContent[]

  published Boolean

  staffPick Boolean

  thumbnailUrl String

  createdAt   DateTime
  publishedAt DateTime
  updatedAt   DateTime
}

model StoryContribution {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String @db.ObjectId

  contributionType ContributionType
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  email     String @unique

  bio String

  passwordHash String

  joinedAt DateTime @default(now())

  verified Boolean @default(false)

  storyContributions StoryContribution[]
  authVerifications  AuthVerification[]
}

model AuthVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  type AuthVerificationType

  createdAt DateTime @default(now())
}

model StoryContent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String @db.ObjectId

  content String

  createdAt DateTime
}

model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())
}

model Brain {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}
