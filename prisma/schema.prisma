// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum StoryType {
  DIGEST
  ESSAY
}

enum Category {
  ARTICLE
  PODCAST
}

enum ContributionType {
  AUTHOR
  ILLUSTRATOR
  ANIMATOR
  PHOTOGRAPHER
  VIDEOGRAPHER
  OTHER
}

enum StoryTopic {
  ASTRONOMY
  BIOLOGY
  CHEMICAL_ENGINEERING
  CHEMISTRY
  COMPUTER_SCIENCE
  ELECTRICAL_ENGINEERING
  ENVIRONMENTAL_SCIENCE
  GEOLOGY
  MATHEMATICS
  MECHANICAL_ENGINEERING
  MEDICINE
  PHYSICS
  PSYCHOLOGY
  SOCIOLOGY
  TECHNOLOGY
}

enum AuthVerificationType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
}

enum UserRole {
  AUTHOR
  EDITOR
}

enum QuizType {
  PRE_QUIZ
  POST_QUIZ
}

enum QuestionType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  DIRECT_MATCHING
  COMPLEX_MATCHING
  SELECT_ALL
}

enum UpdateType {
  CREATE
  DELETE
  UPDATE
}

model Story {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storyType StoryType
  category  Category

  title      String
  titleColor String

  slug String // Title slug for URL conforming to RFC 3986

  summary      String
  summaryColor String

  tags StoryTopic[]

  storyContributions StoryContribution[]
  storyContent       StoryContent[]

  published Boolean

  thumbnailUrl String
  coverCaption String @default("")

  createdAt       DateTime
  publishedAt     DateTime
  updatedAt       DateTime
  quizQuestions   QuizQuestion[]
  staffPick       StaffPick?
  StaffPickRecord StaffPickRecord[]
  pageViews       PageView[]
}

model StoryContribution {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  contributor   Contributor? @relation(fields: [contributorId], references: [id])
  contributorId String?      @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: NoAction)
  storyId String @db.ObjectId

  contributionType       ContributionType
  otherContributorType   String?
  otherContributorCredit String?
  contributorByline      String?

  bio String?
}

model Contributor {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  email     String? @unique
  avatarUrl String?

  bio String?

  contributorSlug String @unique

  storyContributions StoryContribution[]
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String
  lastName  String
  email     String  @unique
  avatarUrl String?

  bio String

  passwordHash String

  joinedAt DateTime @default(now())

  verified Boolean @default(false)

  authVerifications AuthVerification[]

  roles   UserRole[]   @default([])
  quizzes QuizRecord[]

  contactUpdates       ContactMessage[]
  firstQuizRecord      Json?
  mostRecentQuizRecord Json?
  StaffPickRecord      StaffPickRecord[]
  pageViews            PageView[]
}

model AuthVerification {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  type AuthVerificationType

  createdAt DateTime @default(now())
}

model StoryContent {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  story   Story  @relation(fields: [storyId], references: [id], onDelete: Cascade)
  storyId String @db.ObjectId

  content String
  footer  String?

  createdAt DateTime
}

model PageView {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  storyId   String   @db.ObjectId
  story     Story    @relation(fields: [storyId], references: [id])
  createdAt DateTime @default(now())
}

model Brain {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}

model QuizRecord {
  // user answer record
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId String @db.ObjectId

  quizType QuizType

  maxScore           Int
  score              Int
  totalQuestion      Int
  totalCorrectAnswer Int @default(0)

  createAt   DateTime @default(now())
  lastUpdate DateTime @default(now())

  userId String? @db.ObjectId

  user                 User?    @relation(fields: [userId], references: [id])
  quizQuestionIdRemain String[] @db.ObjectId
  grades               Grade[]

  @@index([createAt])
  @@index([storyId, userId])
  @@index([userId])
}

model Bookmark {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  userId  String @db.ObjectId
  storyId String @db.ObjectId

  createdAt DateTime @default(now())

  @@unique([userId, storyId])
}

// feedback schema

enum ContactStatus {
  UNOPENED
  NEEDS_RESPONSE
  CLOSED
  ARCHIVED
}

enum ContactType {
  FEEDBACK
  GET_INVOLVED
}

model ContactMessage {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  contactType ContactType

  name     String
  email    String
  message  String
  senderIp String

  status      ContactStatus
  createdAt   DateTime
  lastUpdated DateTime

  lastUpdatedUser   User?   @relation(fields: [lastUpdatedUserId], references: [id])
  lastUpdatedUserId String? @db.ObjectId
}

model BlockedUser {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String?
  ip    String?

  reason String

  banEndTime DateTime?

  lastUpdated DateTime
}

model QuizQuestion {
  // one of the story's quiz questions
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId         String       @db.ObjectId
  Story           Story        @relation(fields: [storyId], references: [id])
  subheader       String
  contentCategory String
  questionType    QuestionType
  maxScore        Int
  subpartId       String       @db.ObjectId
  deleted         Boolean      @default(false)

  @@unique([subpartId])
  @@index([storyId, deleted])
  @@index([storyId])
}

model MultipleChoiceSubpart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  correctAnswer Int
  explanations  String[]
}

model TrueFalseSubpart {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  questions     String[]
  correctAnswer Boolean[]
  explanations  String[]
}

model DirectMatchingSubpart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  categories    String[]
  correctAnswer Int[]
  explanations  String[]
}

model ComplexMatchingSubpart {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  categories    String[]
  options       String[]
  correctAnswer String[]
  explanations  String[]
}

model SelectAllSubpart {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  question      String
  options       String[]
  correctAnswer Boolean[]
  explanations  String[]
}

model UserResponseSubpart {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  questionType   QuestionType
  userId         String?      @db.ObjectId
  quizQuestionId String       @db.ObjectId
  userAns        String[]
  grade          Grade?

  @@index([userId, quizQuestionId])
}

model QuestionAnswerFirstTime {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String?  @db.ObjectId
  quizQuestionId String   @db.ObjectId
  correct        Boolean
  createAt       DateTime @default(now())

  @@index([userId, quizQuestionId])
  @@index([quizQuestionId])
  @@index([quizQuestionId, correct])
}

model StoryQuizScoreFirstTime {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String?  @db.ObjectId
  storyId            String   @db.ObjectId
  totalCorrectAnswer Int
  createAt           DateTime @default(now())

  @@index([userId, storyId])
  @@index([storyId, totalCorrectAnswer])
  @@index([storyId])
}

model Grade {
  id                    String              @id @default(auto()) @map("_id") @db.ObjectId
  userId                String?             @db.ObjectId
  userResponseSubpartId String              @db.ObjectId
  UserResponseSubpart   UserResponseSubpart @relation(fields: [userResponseSubpartId], references: [id])
  quizQuestionId        String              @db.ObjectId
  totalScore            Int
  maxScore              Int
  quizRecord            QuizRecord?         @relation(fields: [quizRecordId], references: [id])
  quizRecordId          String?             @db.ObjectId

  @@unique([userResponseSubpartId])
  @@index([quizRecordId])
  @@index([userId, quizQuestionId])
}

model QuizQuestionRecord {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  quizQuestionId String     @db.ObjectId
  staffId        String     @db.ObjectId
  updateType     UpdateType
  createAt       DateTime   @default(now())

  @@index([quizQuestionId])
  @@index([createAt])
}

model StaffPick {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId String @unique @db.ObjectId
  story   Story  @relation(fields: [storyId], references: [id])

  createdAt DateTime @default(now())

  description String

  @@unique([storyId, id])
}

model StaffPickRecord {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  storyId String @db.ObjectId
  story   Story  @relation(fields: [storyId], references: [id])

  staffId String @db.ObjectId
  staff   User   @relation(fields: [staffId], references: [id])

  createdAt DateTime @default(now())

  updateType UpdateType

  description String?

  @@index([storyId])
  @@index([staffId])
}
